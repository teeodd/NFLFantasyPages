@page "/player-selection"
@inject HttpClient Http
@using System.Text.Json.Serialization

<PageTitle>Player Selection</PageTitle>

<h1 class="page-title">Legit Fantasy Sports</h1>

<!-- Player Search Inputs -->
<div class="player-selection-container">
    <div class="input-box">
        <h2 class="input-title">Injured Player</h2>
        <input type="text" placeholder="Find injured player" @oninput="(e) => OnSearchInput(e.Value?.ToString(), true)" class="search-box" />
    </div>

    <div class="input-box">
        <h2 class="input-title">Substitute Player</h2>
        <input type="text" placeholder="Find substitute player" @oninput="(e) => OnSearchInput(e.Value?.ToString(), false)" class="search-box" />
    </div>
</div>

<!-- Display Selected Players Side-by-Side Immediately After Each Selection -->
<div class="selected-players-container">
    @if (injuredPlayer != null)
    {
        <div class="player-card-selected">
            <img src="@injuredPlayer.HeadshotUrl" alt="@injuredPlayer.FullName's Headshot" class="player-headshot-small" />
            <h3 class="player-name">@injuredPlayer.FullName (@injuredPlayer.Position)</h3>
            <p class="player-info">Team: @injuredPlayer.Team</p>
            <p class="player-info">Jersey Number: #@injuredPlayer.JerseyNumber</p>
            <p class="player-info">Experience: @injuredPlayer.YearsExp years</p>
            <p class="player-info">College: @injuredPlayer.College</p>
        </div>
    }

    @if (substitutePlayer != null)
    {
        <div class="player-card-selected">
            <img src="@substitutePlayer.HeadshotUrl" alt="@substitutePlayer.FullName's Headshot" class="player-headshot-small" />
            <h3 class="player-name">@substitutePlayer.FullName (@substitutePlayer.Position)</h3>
            <p class="player-info">Team: @substitutePlayer.Team</p>
            <p class="player-info">Jersey Number: #@substitutePlayer.JerseyNumber</p>
            <p class="player-info">Experience: @substitutePlayer.YearsExp years</p>
            <p class="player-info">College: @substitutePlayer.College</p>
        </div>
    }
</div>

<!-- Player Search Results -->
@if (!isPlayerSelected && filteredPlayers.Any())
{
    <div class="player-list">
        @foreach (var player in filteredPlayers)
        {
            <div class="player-card" @onclick="() => SelectPlayer(player, isInjuredPlayer)" @key="player.FullName">
                <img src="@player.HeadshotUrl" alt="@player.FullName's Headshot" class="player-headshot" />
                <h3 class="player-name-small">@player.FullName (@player.Position)</h3>
                <p class="player-team">@player.Team</p>
            </div>
        }
    </div>
}
else if (!isPlayerSelected && searchTerm.Length >= 1 && !filteredPlayers.Any())
{
    <p><em>No players match your search.</em></p>
}

<!-- Display a loading indicator if computation is in progress -->
@if (isComputing)
{
    <p><em>Computing results...</em></p>
}

<!-- Display Computation Results -->
@if (computationResult != null)
{
    <div class="comparison-result">
        <h3>Comparison Results</h3>
        <p>Combined Points: @computationResult.CombinedPoints</p>
        <p>Injured Player Points: @computationResult.InjuredPlayerPoints</p>
        <p>Substitute Player Points: @computationResult.SubstitutePlayerPoints</p>
    </div>
}

@code {
    private List<PlayerInfo>? players;
    private string searchTerm = string.Empty;
    private PlayerInfo? injuredPlayer;
    private PlayerInfo? substitutePlayer;
    private bool isPlayerSelected = false;
    private bool isInjuredPlayer = true;
    private ComputationResult? computationResult;
    private bool isComputing = false;

    private IEnumerable<PlayerInfo> filteredPlayers =>
        !string.IsNullOrWhiteSpace(searchTerm) && searchTerm.Length >= 1 && !isPlayerSelected
            ? players?.Where(p => IsSkillPosition(p.Position) && IsCustomMatch(p.FullName ?? "", searchTerm))
            : Enumerable.Empty<PlayerInfo>();

    private bool IsSkillPosition(string? position) =>
        position == "QB" || position == "RB" || position == "TE" || position == "WR";

    private bool IsCustomMatch(string playerName, string searchTerm)
    {
        if (string.IsNullOrEmpty(playerName))
            return false;

        var searchTerms = searchTerm.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return searchTerms.All(term => playerName.Contains(term, StringComparison.OrdinalIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            players = await Http.GetFromJsonAsync<List<PlayerInfo>>("sample-data/players.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading player data: {ex.Message}");
        }
    }

    private void OnSearchInput(string? input, bool isInjured)
    {
        searchTerm = input ?? string.Empty;
        isPlayerSelected = false;
        isInjuredPlayer = isInjured;

        if (isInjuredPlayer)
        {
            injuredPlayer = null;
        }
        else
        {
            substitutePlayer = null;
        }
    }

    private void SelectPlayer(PlayerInfo player, bool isInjured)
    {
        if (isInjured)
        {
            injuredPlayer = player;
        }
        else
        {
            substitutePlayer = player;
        }

        isPlayerSelected = true;

        if (injuredPlayer != null && substitutePlayer != null)
        {
            RunBackendComputation();
        }
    }

    private async void RunBackendComputation()
    {
        isComputing = true;
        try
        {
            var payload = new
            {
                injured_player_name = injuredPlayer?.FullName,  // Send full name as expected by the backend
                substitute_player_name = substitutePlayer?.FullName
            };

            var response = await Http.PostAsJsonAsync("https://nflrdataapp2-btfxapbhcuhxf5ez.canadacentral-01.azurewebsites.net/compute", payload);

            if (response.IsSuccessStatusCode)
            {
                computationResult = await response.Content.ReadFromJsonAsync<ComputationResult>();
            }
            else
            {
                Console.WriteLine("Failed to trigger computation.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling computation API: {ex.Message}");
        }
        finally
        {
            isComputing = false;
        }
    }


    public class PlayerInfo
    {
        [JsonPropertyName("full_name")]
        public string? FullName { get; set; }

        [JsonPropertyName("position")]
        public string? Position { get; set; }

        [JsonPropertyName("team")]
        public string? Team { get; set; }

        [JsonPropertyName("jersey_number")]
        public int JerseyNumber { get; set; }

        [JsonPropertyName("years_exp")]
        public int YearsExp { get; set; }

        [JsonPropertyName("college")]
        public string? College { get; set; }

        [JsonPropertyName("headshot_url")]
        public string? HeadshotUrl { get; set; }

        [JsonPropertyName("gsis_id")]
        public string? gsis_id { get; set; }
    }

    public class ComputationResult
    {
        [JsonPropertyName("combined_points")]
        public decimal CombinedPoints { get; set; }
    
        [JsonPropertyName("injured_player_points")]
        public decimal InjuredPlayerPoints { get; set; }
    
        [JsonPropertyName("substitute_player_points")]
        public decimal SubstitutePlayerPoints { get; set; }
    }
}
